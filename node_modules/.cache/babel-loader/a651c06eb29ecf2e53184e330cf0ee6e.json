{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\react-website-v1-master\\\\src\\\\components\\\\scripts\\\\StopWatch.js\";\nimport React from \"react\";\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'; //create a function to stop the time \n\nfunction stopTime() {\n  /* check if seconds, minutes and hours are not equal to 0 */\n  if (seconds !== 0 || minutes !== 0 || hours !== 0) {\n    /* display the full time before reseting the stop watch */\n    var fulltime = document.getElementById(\"fulltime\"); //display the full time \n\n    fulltime.style.display = \"block\";\n    var time = gethours + mins + secs;\n    fulltime.innerHTML = 'Fulltime: ' + time; // reset the stop watch \n\n    seconds = 0;\n    minutes = 0;\n    hours = 0;\n    secs = '0' + seconds;\n    mins = '0' + minutes + ': ';\n    gethours = '0' + hours + ': ';\n    /* display the stopwatch after it's been stopped */\n\n    var x = document.getElementById(\"timer\");\n    var stopTime = gethours + mins + secs;\n    x.innerHTML = stopTime;\n    /* display all stop watch control buttons */\n\n    var showStart = document.getElementById('start');\n    showStart.style.display = \"inline-block\";\n    var showStop = document.getElementById(\"stop\");\n    showStop.style.display = \"inline-block\";\n    /* clear the stop watch using the setTimeout( ) return value 'clearTime' as ID */\n\n    clearTimeout(clearTime);\n  } // if () } // \n\n\n  stopTime();\n  /* you need to call the stopTime( ) function to terminate the stop watch */\n\n  window.addEventListener('load', function () {\n    var stop = document.getElementById(\"stop\");\n    stop.addEventListener('click', stopTime);\n  });\n} // stopwatch.js end\n\n\nconst size = \"fullscreen\";\n\nfunction StopWatch() {\n  const [open, setOpen] = React.useState(false);\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: () => setOpen(false),\n    onOpen: () => setOpen(true),\n    open: open,\n    size: size,\n    trigger: /*#__PURE__*/React.createElement(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 18\n      }\n    }, \"Launch Script\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"StopWatch\"), /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 8\n    }\n  }, \"00.00.00\"))), /*#__PURE__*/React.createElement(Modal.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"red\",\n    onClick: () => setOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"green\",\n    content: \"Done\",\n    labelPosition: \"right\",\n    icon: \"checkmark\",\n    onClick: () => setOpen(false),\n    positive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default StopWatch;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/react-website-v1-master/src/components/scripts/StopWatch.js"],"names":["React","Button","Header","Image","Modal","stopTime","seconds","minutes","hours","fulltime","document","getElementById","style","display","time","gethours","mins","secs","innerHTML","x","showStart","showStop","clearTimeout","clearTime","window","addEventListener","stop","size","StopWatch","open","setOpen","useState"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Header, Image, Modal } from 'semantic-ui-react';\r\n\r\n\r\n//create a function to stop the time \r\nfunction stopTime( ) { \r\n  /* check if seconds, minutes and hours are not equal to 0 */ \r\n  if ( seconds !== 0 || minutes !== 0 || hours !== 0 ) { \r\n    /* display the full time before reseting the stop watch */ \r\n    var fulltime = document .getElementById( \"fulltime\" ); \r\n    \r\n    //display the full time \r\n    fulltime.style.display = \"block\"; \r\n    var time = gethours + mins + secs; \r\n    fulltime.innerHTML = 'Fulltime: ' + time; \r\n    \r\n    // reset the stop watch \r\n    seconds = 0; \r\n    minutes = 0; \r\n    hours = 0;\r\n\r\n    secs = '0' + seconds; \r\n    mins = '0' + minutes + ': '; \r\n    gethours = '0' + hours + ': '; \r\n\r\n    /* display the stopwatch after it's been stopped */ \r\n    var x = document.getElementById (\"timer\"); \r\n    var stopTime = gethours + mins + secs; x.innerHTML = stopTime; \r\n\r\n    /* display all stop watch control buttons */ \r\n    var showStart = document.getElementById ('start'); \r\n    showStart.style.display = \"inline-block\"; \r\n    var showStop = document.getElementById (\"stop\"); \r\n    showStop.style.display = \"inline-block\"; \r\n\r\n    /* clear the stop watch using the setTimeout( ) return value 'clearTime' as ID */ \r\n    clearTimeout( clearTime ); \r\n  } \r\n\r\n  // if () } // \r\n  stopTime() \r\n\r\n  /* you need to call the stopTime( ) function to terminate the stop watch */ \r\n  window.addEventListener( 'load', function ( ) { var stop = document.getElementById (\"stop\"); stop.addEventListener( 'click', stopTime ); });\r\n}\r\n\r\n  // stopwatch.js end\r\n\r\nconst size = \"fullscreen\";\r\n\r\nfunction StopWatch() {\r\n   const [open, setOpen] = React.useState(false)\r\n\r\n   return (\r\n      <Modal\r\n        onClose={() => setOpen(false)}\r\n        onOpen={() => setOpen(true)}\r\n        open={open}\r\n        size={size}\r\n        trigger={<Button>Launch Script</Button>}\r\n      >\r\n      <Modal.Header>StopWatch</Modal.Header>\r\n      \r\n      <Modal.Content>\r\n\t\t    <div>\r\n\t\t\t    <h1>00.00.00</h1>\r\n\t\t    </div>\r\n      </Modal.Content>\r\n      \r\n      <Modal.Actions>\r\n        <Button color='red' onClick={() => setOpen(false)}>Close</Button>\r\n        <Button\r\n\t\t      color='green'\r\n          content=\"Done\"\r\n          labelPosition='right'\r\n          icon='checkmark'\r\n          onClick={() => setOpen(false)}\r\n          positive\r\n        />\r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StopWatch;\r\n"]},"metadata":{},"sourceType":"module"}